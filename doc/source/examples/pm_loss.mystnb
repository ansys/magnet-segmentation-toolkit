---
jupytext:
  text_representation:
    extension: .mystnb
    format_name: myst
    format_version: 0.13
    jupytext_version: 1.14.5
kernelspec:
  display_name: Python 3 (ipykernel)
  language: python
  name: python3
---

# Permanent Magnet Loss Calibration

Motor-CAD provides templates to rapidly design and analyze electric machines. Motor-CAD assumes the dimension
of the electric machine in the axial direction is large relative to the motor diameter.  The 3D effects, for example
due to end-winding inductance or loss in permanent magnets are approximated.

The validity of these approximations can be tested by simulating the full 3D motor in the 3D FEM solver
Ansys Maxwell.  This example starts with complete Motor-CAD permanent magnet machine, runs the analysis in
Maxwell 3D and updates the loss pof the permanent magnetis in Motor-CAD.

The thermal performance of the machien can then be improved in Motor-CAD by leveraging the
accuracy of the loss calculation
from the 3D Model and the very efficient thermal modeling capabilities built into Motor-CAD.-

```{code-cell} ipython3
import os
import pyaedt

non_graphical = False
```

# Generate the Maxwell 3D Project

Set non-graphical mode. ``"PYAEDT_NON_GRAPHICAL"`` is needed to generate
documentation only.
You can set ``non_graphical`` either to ``True`` or ``False``.

```{code-cell} ipython3
motor_name = "built_e9"
input_folder = '..\\..\\tests\\input_data\\'
motor_fn = input_folder + motor_name + '.mot'

maxwell_fn = pyaedt.generate_unique_project_name(project_name="array")
hfss = pyaedt.Maxwell(projectname=project_name,
                   specified_version="2023.1",
                   designname="Array_Simple",
                   non_graphical=non_graphical,
                   new_desktop_session=True)

print("Project name " + project_name)
```

```{code-cell} ipython3
example_path = pyaedt.downloads.download_3dcomponent()
```

## Define the antenna array

Read the array definition from a JSON file. A JSON file
can contain all information needed to import and set up a
full array in HFSS.

If a 3D component is not available in the design, it is loaded
into the dictionary from the path that you specify. The following
code edits the dictionary to point to the location of the A3DCOMP file.

```{code-cell} ipython3
dict_in = pyaedt.data_handler.json_to_dict(os.path.join(example_path, "array_simple.json"))
dict_in["Circ_Patch_5GHz1"] = os.path.join(example_path, "Circ_Patch_5GHz.a3dcomp")
dict_in["cells"][(3, 3)] = {"name": "Circ_Patch_5GHz1"}
hfss.add_3d_component_array_from_json(dict_in)
```

## Set up simulation and analyze

```{code-cell} ipython3
setup = hfss.create_setup()
setup.props["Frequency"] = "5GHz"
setup.props["MaximumPasses"] = 3

hfss.analyze(num_cores=4)
```

## Get far field data

Get far field data. After the simulation completes, the far
field data is generated port by port and stored in a data class.

```{code-cell} ipython3
ffdata = hfss.get_antenna_ffd_solution_data(sphere_name="Infinite Sphere1",
                                            setup_name=hfss.nominal_adaptive,
                                            frequencies=[5e9])
```

## Generate contour plot

Generate a contour plot. You can define the Theta scan
and Phi scan.

```{code-cell} ipython3
ffdata.plot_farfield_contour(qty_str='RealizedGain', convert_to_db=True,
                             title='Contour at {}Hz'.format(ffdata.frequency))
```

## Generate 2D cutout plots

```{code-cell} ipython3
ffdata.plot_2d_cut(primary_sweep='theta', secondary_sweep_value=[-180, -75, 75],
                   qty_str='RealizedGain',
                   title='Azimuth at {}Hz'.format(ffdata.frequency),
                   convert_to_db=True)

ffdata.plot_2d_cut(primary_sweep="phi", secondary_sweep_value=30,
                   qty_str='RealizedGain',
                   title='Elevation',
                   convert_to_db=True)
```

## Generate 3D polar plots

The following plot is created with [PyVista](https://docs.pyvista.org/version/stable/). Try using the widgets to update plot visibility interactively. Zoom in or out using the center mouse wheel.

```{code-cell} ipython3
ffdata.polar_plot_3d(qty_str='RealizedGain',
                     convert_to_db=True)
```

## Generate 3D plots in PyVista

Generate 3D plots in PyVista. You can define the Theta and Phi
scan angles. You can change the easy-to-use interactive plot
that is generated on the fly.

```{code-cell} ipython3
ffdata.polar_plot_3d_pyvista(qty_str='RealizedGain',
                             convert_to_db=True,
                             export_image_path=os.path.join(hfss.working_directory, "picture.jpg"),
                             show=False)
```

Release AEDT.

```{code-cell} ipython3
hfss.release_desktop()
```
